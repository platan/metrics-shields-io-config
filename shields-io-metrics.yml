---
- name: Setup Node exporter
  hosts: metrics
  roles:
    - prometheus.prometheus.node_exporter
  vars:
    node_exporter_web_listen_address: 127.0.0.1:9100
  tags:
    - prometheus
    - node-exporter
- name: Setup Blackbox exporter
  hosts: metrics
  roles:
    - prometheus.prometheus.blackbox_exporter
  vars:
    blackbox_exporter_web_listen_address: 127.0.0.1:9115
    blackbox_exporter_configuration_modules:
      http_2xx:
        prober: http
        timeout: 10s
        http:
          preferred_ip_protocol: "ip4"
  tags:
    - prometheus
    - blackbox-exporter
- name: Setup Prometheus (using prometheus.prometheus collection)
  hosts: metrics
  become: true
  tags:
    - prometheus
  roles:
    - prometheus.prometheus.prometheus
  vars:
    - prometheus_version: "{{ metrics_prometheus_version }}"
      # override extra labels added by cloudalchemy.prometheus role
      prometheus_external_labels: {}
      prometheus_web_external_url: "http://{{ metrics_domain }}/prometheus/"
      prometheus_web_listen_address: 127.0.0.1:9090
      prometheus_config_flags_extra:
        web.route-prefix: /
      prometheus_global:
        scrape_interval: 15s
      prometheus_scrape_configs:
        - job_name: "telegraf"
          honor_labels: true
          static_configs:
            - targets: ["localhost:9273"]
          metric_relabel_configs:
            - source_labels: [service]
              target_label: exported_service
            - action: labeldrop
              regex: service
        - job_name: "prometheus"
          static_configs:
            - targets: ["localhost:9090"]
        - job_name: "node"
          static_configs:
            - targets: ["localhost:9100"]
          scrape_interval: 60s
        - job_name: "blackbox"
          metrics_path: /probe
          params:
            module: [http_2xx]
          static_configs:
            - targets:
                - https://raster.shields.io/badge/foo-bar-blue.png
                - https://shields.io/
                - https://img.shields.io/badge/foo-bar-blue
                - https://img.shields.io/npm/v/gh-badges
                - https://img.shields.io/travis/rust-lang/rust
                - https://img.shields.io/npm/dt/gh-badges
                - https://img.shields.io/github/stars/badges/shields
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: 127.0.0.1:9115
- name: Setup Grafana (without deprecated roles)
  hosts: metrics
  tags:
    - grafana2
  become: true
  tasks:
    - name: Add repository
      block:
        - name: create /etc/apt/keyrings directory
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'
        - name: add key
          ansible.builtin.apt_key:
            id: B53AE77BADB630A683046005963FA27710458545
            url: https://apt.grafana.com/gpg.key
            keyring: /etc/apt/keyrings/grafana.gpg
        - name: add repository
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main"
            state: present
    - name: Install Grafana using deb package
      ansible.builtin.apt:
        # TODO check checksum
        deb: https://dl.grafana.com/oss/release/grafana_{{ metrics_grafana_version }}_amd64.deb
    - name: Enable and start service grafana-server
      become: yes
      ansible.builtin.service:
        name: grafana-server
        enabled: yes
        state: started
    - name: Copy config
      become: true
      ansible.builtin.template:
        src: grafana/grafana.ini
        dest: /etc/grafana/grafana.ini
    - name: Copy datasources provisioning
      become: true
      ansible.builtin.copy:
        src: grafana/provisioning/datasources/prometheus.yml
        dest: /etc/grafana/provisioning/datasources/prometheus.yaml
        # TODO add dashboard 7587
    - name: Copy dashboards provisioning
      become: true
      ansible.builtin.copy:
        src: grafana/provisioning/dashboards/from-file.yml
        dest: /etc/grafana/provisioning/dashboards/
    - name: Copy dashboards
      become: true
      ansible.builtin.copy:
        src: grafana/dashboards/
        dest: /etc/grafana/dashboards/
    - name: Download "Node Exporter Full" dashboard
      become: true
      ansible.builtin.get_url:
        url: https://grafana.com/api/dashboards/1860/revisions/33/download
        dest: /etc/grafana/dashboards/node-exporter-full-id-1860-revision-33.json
    # - name: Download "Prometheus Blackbox Exporter" dashboard
    #   become: true
    #   ansible.builtin.get_url:
    #     url: https://grafana.com/api/dashboards/7587/revisions/3/download
    #     dest: /etc/grafana/dashboards/prometheus-blackbox-exporter-id-7587-revision-3.json
    - name: Install plugin
      become: true
      ansible.builtin.command: /usr/share/grafana/bin/grafana cli plugins install grafana-piechart-panel
    - name: Restart service grafana-server
      become: true
      ansible.builtin.service:
        name: grafana-server
        state: restarted
- name: Setup grafana
  hosts: metrics
  roles:
    - cloudalchemy.grafana
  vars:
    grafana_version: '{{ metrics_grafana_version }}'
    grafana_security:
      admin_user: admin
      admin_password: "{{mertics_grafana_admin_password}}"
    grafana_url: "https://{{ metrics_domain }}"
    grafana_datasources:
      - name: Prometheus-default
        type: prometheus
        access: proxy
        url: 'http://localhost:9090/'
        basicAuth: false
        isDefault: true
        orgId: 1
        editable: true
    grafana_dashboards:
    - dashboard_id: 1860
      revision_id: 37
      datasource: Prometheus-default
    - dashboard_id: 7587
      revision_id: 3
      datasource: Prometheus-default
    grafana_dashboards_dir: grafana/dashboards
    grafana_users:
      auto_assign_org_id: 1
      auto_assign_org_role: Editor
    grafana_auth:
      github:
        enabled: true
        allow_sign_up: true
        client_id: "{{ metrics_grafana_github_client_id }}"
        client_secret: "{{ metrics_grafana_github_client_secret }}"
        scopes: 'user:email,read:org'
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        # 3047484 is an id of the https://github.com/orgs/badges/teams/shields-core team
        # How to get an id?
        # curl https://api.github.com/orgs/badges/teams -H "Authorization: token XXX" -s | jq '.[] | select(.name=="shields-core").id'
        team_ids: 3047484
      anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Viewer
  tasks:
  - name: Install worldPing plugin
    become: yes
    grafana_plugin:
      name: raintank-worldping-app
      version: latest
    notify:
    - restart grafana
  - name: Install Pie Chart plugin
    become: yes
    grafana_plugin:
      name: grafana-piechart-panel
      version: latest
    notify:
    - restart grafana
  handlers:
    - name: restart grafana
      become: yes
      service:
        name: grafana-server
        state: restarted
  tags:
    - grafana
- name: Setup nginx
  hosts: metrics
  become: true
  roles:
    - role: nginxinc.nginx
      tags: [nginx-role]
  vars:
    # 1.18.0 is not available in nginx repository: https://nginx.org/en/linux_packages.html#Ubuntu
    # the next available version after 1.17.x is 1.19.x
    nginx_version: "={{ metrics_nginx_version }}-1~focal"
  tags:
    - nginx
    - nginx_install
  tasks:
  - name: Install package required by htpasswd
    apt:
      name: python3-passlib
    tags:
      - nginx-htpasswd
  - name: Create a password file for prometheus
    htpasswd:
      path: /etc/nginx/.htpasswd.{{ metrics_domain }}-prometheus
      name: prometheus
      password: '{{ mertics_prometheus_password }}'
      owner: nginx
      group: root
      mode: 0640
    tags:
      - nginx-htpasswd
  - name: Create a password file for telegraf
    htpasswd:
      path: /etc/nginx/.htpasswd.{{ metrics_domain }}-telegraf
      name: '{{ item.name }}'
      password: '{{ item.password }}'
      owner: nginx
      group: root
      mode: 0640
    with_items:
      - { name: 'telegraf', password: '{{ mertics_telegraf_password }}' }
      - { name: 'telegraf-staging', password: '{{ mertics_telegraf_staging_password }}' }
      - { name: 'telegraf-production', password: '{{ mertics_telegraf_production_password }}' }
    tags:
      - nginx-htpasswd
- name: Configure nginx
  hosts: metrics
  become: true
  roles:
    - role: nginxinc.nginx_config
      tags: [nginx-role]
  vars:
    nginx_config_http_template_enable: true
    nginx_config_http_template:
     default:
        template_file: http/default.conf.j2
        conf_file_name: default.conf
        conf_file_location: /etc/nginx/conf.d/
        servers:
          server1:
            listen:
              listen_localhost:
                port: "{{ metrics_port }}"
            server_name: "{{ mertics_domains }}"
            reverse_proxy:
              locations:
                grafana:
                  location: /
                  proxy_connect_timeout: 300
                  proxy_pass: http://localhost:3000/
                  proxy_read_timeout: 300
                  proxy_set_header:
                    header_host:
                      name: Host
                      value: $host
                    header_x_real_ip:
                      name: X-Real-IP
                      value: $remote_addr
                    header_x_forwarded_for:
                      name: X-Forwarded-For
                      value: $proxy_add_x_forwarded_for
                    header_x_forwarded_proto:
                      name: X-Forwarded-Proto
                      value: $scheme
                prometheus:
                  location: /prometheus/
                  proxy_connect_timeout: 300
                  proxy_pass: http://localhost:9090/
                  proxy_read_timeout: 300
                  proxy_set_header:
                    header_host:
                      name: Host
                      value: $host
                    header_x_real_ip:
                      name: X-Real-IP
                      value: $remote_addr
                    header_x_forwarded_for:
                      name: X-Forwarded-For
                      value: $proxy_add_x_forwarded_for
                    header_x_forwarded_proto:
                      name: X-Forwarded-Proto
                      value: $scheme
                  auth_basic: "Restricted Content"
                  # this role creates 'nginx' user and installs nginx
                  # this htpasswd file will be created in the next task, because it have to be owned by 'nginx' user
                  auth_basic_user_file: /etc/nginx/.htpasswd.{{ metrics_domain }}-prometheus
                telegraf:
                  location: /telegraf
                  proxy_connect_timeout: 5
                  proxy_pass: http://localhost:8082
                  proxy_read_timeout: 5
                  proxy_set_header:
                    header_host:
                      name: Host
                      value: $host
                    header_x_real_ip:
                      name: X-Real-IP
                      value: $remote_addr
                    header_x_forwarded_for:
                      name: X-Forwarded-For
                      value: $proxy_add_x_forwarded_for
                    header_x_forwarded_proto:
                      name: X-Forwarded-Proto
                      value: $scheme
                  auth_basic: "Restricted Content"
                  # this role creates 'nginx' user and installs nginx
                  # this htpasswd file will be created in the next task, because it have to be owned by 'nginx' user
                  auth_basic_user_file: /etc/nginx/.htpasswd.{{ metrics_domain }}-telegraf
  tags:
    - nginx
- name: Install Let's Encrypt certificate and enable HTTPS in nginx
  hosts: metrics
  tasks:
  - name: Install python3-certbot-nginx package
    become: yes
    apt:
      name: python3-certbot-nginx
    tags: certbot-package
  - name: Obtain a certificate
    become: yes
    shell: certbot certonly -d {{ metrics_domain }} --agree-tos -m {{ metrics_certbot_email }} --nginx --keep-until-expiring
    tags: certbot-obtain
  - name: Add the certificate to nginx configuration
    become: yes
    shell: certbot install --nginx --cert-name {{ metrics_domain }} --redirect -n
    tags: certbot-nginx
  tags: certbot
- name: Setup Telegraf
  hosts: metrics
  roles:
    - dj-wasabi.telegraf
  vars:
  # apt repository contains only the latest version:
  # https://github.com/dj-wasabi/ansible-telegraf/issues/95#issuecomment-480397359, https://github.com/influxdata/telegraf/issues/5685
    telegraf_agent_version: '{{ metrics_telegraf_version }}'
    telegraf_agent_package_method: repo
    telegraf_agent_package_state: present
    telegraf_agent_omit_hostname: true
    telegraf_plugins_default: []
    telegraf_plugins_extra:
      http_listener_v2:
        config:
          - service_address = ":8082"
          - data_format = "influx"
          - max_body_size = "1MB"
    telegraf_agent_output:
      - type: prometheus_client
        config:
          - listen = ":9273"
          - metric_version = 2
          - expiration_interval = "20s"
          - collectors_exclude = ["gocollector", "process"]
          # seems that 'export_timestamp = true' does not work
          # - export_timestamp = true
      - type: file
        config:
          - files = ["/tmp/metrics.out"]
          - data_format = "influx"
          - rotation_max_size = "10MB"
          - rotation_max_archives = 10
  tags:
    - telegraf
